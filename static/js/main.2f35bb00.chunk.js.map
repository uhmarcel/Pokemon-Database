{"version":3,"sources":["library/utilities.js","components/Sidebar/ItemSettings.js","components/Sidebar/PokeData/PokeEntry.js","components/Sidebar/PokeData/PokeStats.js","components/Sidebar/PokeData/PokeEvolutions.js","components/Utilities/Type.js","components/Sidebar/PokeData/PokeReview.js","components/Sidebar/PokeData/PokeMoves.js","components/Sidebar/Item.js","components/Sidebar/ItemList.js","components/Sidebar/Sidebar.js","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["getID","url","urlTokens","split","length","getImageByID","id","capitalize","str","charAt","toUpperCase","substring","getEntryText","flavor","i","language","name","flavor_text","processEvolutions","evolutionAPI","base","species","imgurl","evolutions","currentNode","evolves_to","push","atLvl","evolution_details","min_level","getTypeColor","type","filterNonLvlup","moves","filtered","lvl","j","version_group_details","move_learn_method","level_learned_at","move","processMoves","_x","_processMoves","apply","this","arguments","_callee","p","promises","response","processed","regenerator_default","a","wrap","_context","prev","next","Pokedex","protocol","map","m","resource","Promise","all","sent","accuracy","class","damage_class","power","sort","b","abrupt","stop","formatName","out","styles","ItemSettings","state","pokedexs","input","dropdown","toggleDropdown","_this","setState","prevState","gatherAllPokedexs","dexs","getPokedexsList","data","results","e","applyFilter","props","applyPokedex","react_default","createElement","ListGroupItem","className","style","borderRadius","InputGroup","Input","autoComplete","placeholder","onChange","target","value","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","color","caret","DropdownMenu","dex","DropdownItem","onClick","key","Component","PokeEntry","loaded","_this$props","entryText","onLoad","Card","CardBody","PokeStats","stats","display","s","base_stat","Array","react","Progress","max","arrowStyles","borderLeft","borderTop","borderBottom","PokeEvolutions","_this2","Row","Col","src","alt","evol","evoMsg","getEvolutionMsg","evolution","message","Type","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","background","PokeReview","types","t","currentDisplay","xs","Fade","Utilities_Type","PokeMoves","moveset","Table","hover","size","itemStyle","borderRight","paddingTop","paddingBottom","imgStyle","height","Item","collapse","textEntry","gatherPokeData","then","remeasureItem","intervalID","setInterval","setTimeout","clearInterval","_this$state$data","img","entryNumber","entry","action","Collapse","onEntered","onExited","onExiting","PokeData_PokeReview","PokeData_PokeStats","PokeData_PokeEntry","PokeData_PokeEvolutions","PokeData_PokeMoves","getPokemonByName","getPokemonSpeciesByName","pokemon","pokemonSpecies","movesetPromise","evolutionPromise","evolution_chain","slot","flavor_text_entries","resolve","chain","assign","ItemList","renderRow","_ref","index","parent","es","cache","columnIndex","rowIndex","_ref2","measure","Sidebar_Item","pokemons","entry_number","pokemon_species","CellMeasurerCache","fixedWidth","defaultHeight","focusIndex","undefined","_ref3","width","rowHeight","rowRenderer","rowCount","overscanRowCount","deferredMeasurementCache","scrollToIndex","Sidebar","asyncToGenerator","mark","pokedex","pokes","gatherPokesByPokedex","_callee2","filterValue","filter","filterFunction","output","_context2","toLowerCase","_x2","getPokedexByName","pokemon_entries","Sidebar_ItemSettings","Sidebar_ItemList","MainPage","overflow","components_Sidebar_Sidebar","App","pages_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f35bb00.chunk.js","sourcesContent":["import Pokedex from 'pokedex-promise-v2';\r\n\r\nexport function getID(url) {    \r\n    const urlTokens = url.split(\"/\");\r\n    const id = urlTokens[urlTokens.length - 2];\r\n    return id;\r\n}\r\n\r\nexport function getImageByID(id) {\r\n    const rawUrl = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\r\n    return rawUrl + id + '.png';\r\n}\r\n\r\nexport function capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1)\r\n}\r\n\r\nexport function getEntryText(flavor) {\r\n    for (let i=0; i<flavor.length; i++) {\r\n        if (flavor[i].language.name === \"en\")\r\n            return flavor[i].flavor_text\r\n    }\r\n}\r\n\r\nexport function processEvolutions(evolutionAPI) {\r\n    let base = {\r\n        name: evolutionAPI.species.name,\r\n        imgurl: getImageByID(getID(evolutionAPI.species.url))\r\n    }\r\n    let evolutions = [];\r\n    let currentNode = evolutionAPI.evolves_to;\r\n    while (currentNode[0]) {\r\n        evolutions.push({\r\n            name: currentNode[0].species.name,\r\n            imgurl: getImageByID(getID(currentNode[0].species.url)),\r\n            atLvl: currentNode[0].evolution_details[0].min_level\r\n        });\r\n        currentNode = currentNode[0].evolves_to;\r\n    }\r\n    return { base, evolutions };\r\n}\r\n\r\nexport function getTypeColor(type) {\r\n    switch (type) {\r\n        case 'normal':   return '#BDBDAE';\r\n        case 'poison':   return '#AC5DA3';\r\n        case 'psychic':  return '#FA65B5';\r\n        case 'grass':    return '#8DD850';\r\n        case 'ground':   return '#EDCB56';\r\n        case 'ice':      return '#97F1FF';\r\n        case 'fire':     return '#FA5441';\r\n        case 'rock':     return '#CEBD73';\r\n        case 'dragon':   return '#8474FE';\r\n        case 'water':    return '#55AFFF';\r\n        case 'bug':      return '#C2D21A';\r\n        case 'dark':     return '#8F6955';\r\n        case 'fighting': return '#7F4440';\r\n        case 'ghost':    return '#7B76D8';\r\n        case 'steel':    return '#C4C2DB';\r\n        case 'flying':   return '#7AA5FF';\r\n        case 'electric': return '#FDE63C';\r\n        case 'fairy':    return '#F9AEFF';\r\n        default:         return '#rgba(0,0,0,0)';\r\n    }\r\n}\r\n\r\nexport function filterNonLvlup(moves) {\r\n    let filtered = [];\r\n    \r\n    for (let i=0; i<moves.length; i++) {\r\n        let lvl = -1;\r\n        for (let j=0; j<moves[i].version_group_details.length; j++) {\r\n            if (moves[i].version_group_details[j].move_learn_method.name === 'level-up') {\r\n                lvl = moves[i].version_group_details[j].level_learned_at;\r\n                break;\r\n            }\r\n        }\r\n        if (lvl === -1)\r\n            continue;\r\n        const name = moves[i].move.name;\r\n        const url = moves[i].move.url;\r\n        filtered.push({name, lvl, url});\r\n    }\r\n    return filtered;\r\n}\r\n\r\n\r\nexport async function processMoves(moves) {\r\n    let p = new Pokedex({protocol: 'https'});\r\n    \r\n    let filtered = filterNonLvlup(moves);\r\n    let promises = filtered.map( m => p.resource(m.url) );\r\n    let response = await Promise.all(promises);\r\n    let processed = [];\r\n\r\n    for (let i=0; i<filtered.length; i++) {\r\n        processed.push({\r\n            name: filtered[i].name,\r\n            lvl: filtered[i].lvl,\r\n            accuracy: response[i].accuracy,\r\n            class: response[i].damage_class.name,\r\n            power: response[i].power,\r\n            type: response[i].type.name\r\n        })\r\n    }    \r\n    processed.sort((a,b) => (a.lvl > b.lvl) ? 1 : -1);\r\n    return processed;\r\n}\r\n\r\n\r\nexport function processTypes(types) {\r\n    let processed = types.sort( (a,b) =>\r\n        a.slot > b.slot ? 1 : -1\r\n    )\r\n    return processed\r\n}\r\nexport function formatName(name) {\r\n    let out = name.charAt(0).toUpperCase();\r\n    for (let i=1; i<name.length; i++) {\r\n        if (name.charAt(i) === '-') {\r\n            out += \" \" + name.charAt(i+1).toUpperCase();\r\n            i++; \r\n        }\r\n        else {\r\n            out += name.charAt(i);\r\n        }\r\n    }\r\n    return out;\r\n}","import React, { Component } from 'react';\r\nimport { ListGroupItem, Input, InputGroup, InputGroupButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport Pokedex from 'pokedex-promise-v2';\r\nimport { formatName } from '../../library/utilities';\r\n\r\nconst styles = {\r\n    // background: '#d8d8d8'\r\n}\r\n\r\n\r\nclass ItemSettings extends Component {\r\n\r\n    state = {\r\n        pokedexs: [],\r\n        input: '',\r\n        dropdown: false\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let dexs = await this.gatherAllPokedexs();\r\n        this.setState({pokedexs: dexs});\r\n    }\r\n\r\n    async gatherAllPokedexs() {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        let data = await p.getPokedexsList();\r\n        return data.results.map(e => e.name);\r\n    }\r\n\r\n    toggleDropdown = () => {\r\n        this.setState(prevState => ({dropdown: !prevState.dropdown}));\r\n    }\r\n\r\n\r\n    render() {\r\n        const pokedexs = this.state.pokedexs;\r\n        const dropdown = this.state.dropdown;\r\n        const applyFilter = this.props.applyFilter;\r\n        const applyPokedex = this.props.applyPokedex;\r\n\r\n        return (\r\n            <ListGroupItem className='sticky-top bg-dark' style={{borderRadius: '0'}}>\r\n                <InputGroup>\r\n                    <Input \r\n                        type = \"text\" \r\n                        autoComplete = \"off\" \r\n                        placeholder = \"Search\" \r\n                        onChange = {e => applyFilter(e.target.value)} \r\n                        style = {styles}\r\n                    />\r\n                    <InputGroupButtonDropdown addonType=\"append\" isOpen={dropdown} toggle={this.toggleDropdown}>\r\n                        <DropdownToggle color='info' caret> Pokedex </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            {pokedexs.map( dex => (\r\n                                <DropdownItem \r\n                                    onClick={e => applyPokedex(e.target.name)}\r\n                                    key={dex}\r\n                                    name={dex}\r\n                                >\r\n                                    {formatName(dex)}\r\n                                </DropdownItem>\r\n                            ))}\r\n                        </DropdownMenu>\r\n                    </InputGroupButtonDropdown>\r\n                </InputGroup>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ItemSettings\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\nclass PokeEntry extends Component {\r\n\r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {entryText, onLoad} = this.props;\r\n        const {loaded} = this.state;\r\n        if (!loaded && entryText) {\r\n            this.setState({loaded: true})\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const entryText = this.props.entryText ? this.props.entryText : \"Loading entry...\";\r\n\r\n        return (   \r\n            <Card>\r\n                <CardBody>\r\n                    {entryText}\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokeEntry\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Progress } from 'reactstrap';\r\n\r\nclass PokeStats extends Component {\r\n    \r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {stats, onLoad} = this.props;\r\n        const {loaded} = this.state;\r\n        if (!loaded && stats[0]) {\r\n            this.setState({loaded: true})\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const stats = this.props.stats;\r\n        const display = stats[0] ? stats.map(s => s.base_stat) : Array(6);\r\n        const maxStat = 150;\r\n\r\n        return (   \r\n            <Fragment>\r\n                <div className=\"text-center\">HP</div>\r\n                <Progress color=\"danger\" value={display[5]} max={maxStat}> <span className='text-right pr-2'>{display[5]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Attack</div>\r\n                <Progress color=\"warning\"value={display[4]} max={maxStat}> <span className='text-right pr-2'>{display[4]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Defense</div>\r\n                <Progress color=\"warning\" value={display[3]} max={maxStat}> <span className='text-right pr-2'>{display[3]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Sp. Atk</div>\r\n                <Progress color=\"info\" value={display[2]} max={maxStat}> <span className='text-right pr-2'>{display[2]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Sp. Def</div>\r\n                <Progress color=\"success\" value={display[1]} max={maxStat}> <span className='text-right pr-2'>{display[1]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Speed</div>\r\n                <Progress color=\"primary\"value={display[0]} max={maxStat}> <span className='text-right pr-2'>{display[0]}</span> </Progress>           \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokeStats\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst arrowStyles = {\r\n    display: 'inline-block',\r\n    borderLeft: '14px solid #aaa',\r\n    borderTop: '9px solid transparent',\r\n    borderBottom: '9px solid transparent'\r\n    \r\n}\r\n\r\nclass PokeEvolutions extends Component {\r\n    \r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {evolutions, onLoad} = this.props;\r\n        const {loaded} = this.state;\r\n        if (!loaded && evolutions.evolutions) {\r\n            this.setState({loaded: true})\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const base = this.props.evolutions.base;\r\n        const evolutions = this.props.evolutions.evolutions;\r\n        \r\n        if (evolutions) {\r\n            return (   \r\n                <Row>\r\n                    <Col className='p-0 text-center'>\r\n                        <img src={base.imgurl} alt='item' className='img-fluid'/>\r\n                    </Col>\r\n                    \r\n                    {evolutions.map( (evol, i) => {\r\n                        const evoMsg = this.getEvolutionMsg(evol);\r\n\r\n                        return (\r\n                        <Fragment key={i}>\r\n                            <div className='d-flex align-items-center'>\r\n                                <div>\r\n                                    <div className='text-center'>\r\n                                        <div style={arrowStyles}></div>\r\n                                    </div>\r\n                                    <small>{evoMsg}</small>\r\n                                </div>\r\n                            </div>\r\n                            <Col className='p-0 text-center'>\r\n                                <img src={evol.imgurl} alt='item' className='img-fluid'/>\r\n                            </Col>\r\n                        </Fragment>\r\n                        )}\r\n                    )}\r\n                </Row>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    getEvolutionMsg(evolution) {\r\n        let message = '';\r\n        if (evolution.atLvl) {\r\n            message = 'lvl ' + evolution.atLvl;\r\n        }\r\n        return message;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PokeEvolutions\r\n","import React, { Component } from 'react';\r\nimport { capitalize, getTypeColor } from '../../library/utilities';\r\n\r\n\r\nclass Type extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.style = {\r\n            background: getTypeColor(this.props.type),\r\n            borderRadius: '8px'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const type = this.props.type;\r\n        const display = type ? capitalize(type) : '';\r\n\r\n        return (  \r\n            <div className='text-light text-center' style={this.style}> \r\n                {display}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Type","import React, { Component } from 'react';\r\nimport { Fade, Row, Col } from 'reactstrap';\r\nimport Type from '../../Utilities/Type';\r\n\r\n\r\nclass PokeReview extends Component {\r\n    \r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {types, onLoad} = this.props;\r\n        const {loaded} = this.state;\r\n        if (!loaded && types) {\r\n            this.setState({loaded: true})\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const types = this.props.types;\r\n        const display = types ? types.map(t => t.type.name) : ['load'];\r\n\r\n        return (  \r\n            <Row>\r\n                {display.map( currentDisplay =>\r\n                    <Col xs='4' key={currentDisplay}>\r\n                        <Fade>\r\n                            <Type type={currentDisplay} />\r\n                        </Fade>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PokeReview\r\n","import React, { Component } from 'react';\r\nimport { Table, Card } from 'reactstrap';\r\nimport { formatName } from '../../../library/utilities';\r\nimport Type from '../../Utilities/Type';\r\n\r\nclass PokeMoves extends Component {\r\n    \r\n    state = {\r\n        loaded: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {moveset, onLoad} = this.props;\r\n        const {loaded} = this.state;\r\n        if (!loaded && moveset) {\r\n            this.setState({loaded: true})\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const moveset = this.props.moveset; // {name, lvl, url}\r\n        \r\n        if (moveset) {\r\n            return ( \r\n                <Card>\r\n                    <Table hover size='sm' className='mb-1'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th className='text-center'>Lv.</th>\r\n                                <th>Move</th>\r\n                                <th>Type</th>\r\n                                <th className='text-right'>Pow.</th>\r\n                                <th className='text-right'>Acc.</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {moveset.map(m => \r\n                            <tr key={m.name} className=\"small\">\r\n                                <td className='text-right'> {m.lvl} </td>\r\n                                <td> {formatName(m.name)} </td>\r\n                                <td> {m.class !== 'status'? <Type type={m.type}/> : ''} </td>\r\n                                <td className='text-right'> {m.power ? m.power : '-'} </td>\r\n                                <td className='text-right'> {m.accuracy ? m.accuracy : '-'} </td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default PokeMoves\r\n","import React, { Component } from 'react';\r\nimport { ListGroupItem, Row, Col, Collapse } from 'reactstrap';\r\nimport Pokedex from 'pokedex-promise-v2';\r\n\r\nimport { getImageByID, capitalize, getEntryText, processEvolutions, processMoves, processTypes } from '../../library/utilities'\r\nimport PokeEntry from './PokeData/PokeEntry';\r\nimport PokeStats from './PokeData/PokeStats';\r\nimport PokeEvolutions from './PokeData/PokeEvolutions';\r\nimport PokeReview from './PokeData/PokeReview';\r\nimport PokeMoves from './PokeData/PokeMoves';\r\n\r\n\r\nconst itemStyle = {\r\n    borderTop: 'none',\r\n    borderLeft: 'none',\r\n    borderRight: 'none',\r\n    borderRadius: '0',\r\n    paddingTop: '10px',\r\n    paddingBottom: '10px'\r\n}\r\n\r\nconst imgStyle = {\r\n    height: '96px'\r\n}\r\n\r\n\r\nclass Item extends Component {\r\n\r\n    state = { \r\n        collapse: false,\r\n        data: {\r\n            stats: [],\r\n            textEntry: '',\r\n            evolutions: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.props.onLoad();\r\n    }\r\n\r\n    toggle = () => {\r\n        if (!this.state.data.entryText) {\r\n            this.gatherPokeData(this.props.id)\r\n            .then(data => this.setState({data}));\r\n        }\r\n        this.setState( prevState => ({ collapse: !prevState.collapse })); \r\n    }\r\n\r\n\r\n    render() {\r\n        const { types, entryText, stats, evolutions, moveset } = this.state.data;\r\n        const img = getImageByID(this.props.id);\r\n        const name = capitalize(this.props.name);\r\n        const entryNumber = this.props.entry;\r\n\r\n        return (\r\n            <ListGroupItem action style={itemStyle} onClick={this.toggle}>\r\n                <Row>\r\n                    <Col xs='3' className='text-center'>\r\n                        <div style={imgStyle}>\r\n                            <img src={img} alt='item' style={imgStyle}/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs='6' className='align-self-center text-center'>\r\n                        <p>{name}</p>\r\n                    </Col>\r\n                    <Col xs='3' className='align-self-center text-center'>\r\n                        <p>{entryNumber}</p>\r\n                    </Col>\r\n                </Row>  \r\n\r\n                <Collapse \r\n                    isOpen={this.state.collapse} \r\n                    onEntered={this.props.onLoad}\r\n                    onExited={this.props.onLoad}\r\n                    onExiting={this.remeasureItem}\r\n                >\r\n                    <PokeReview types={types} onLoad={this.remeasureItem}/>\r\n                    <br/>\r\n                    <PokeStats stats={stats} onLoad={this.remeasureItem}/>\r\n                    <br/>\r\n                    <PokeEntry entryText={entryText} onLoad={this.remeasureItem}/>\r\n                    <br/>\r\n                    <PokeEvolutions evolutions={evolutions} onLoad={this.remeasureItem}/>\r\n                    <br/>\r\n                    <PokeMoves moveset={moveset} onLoad={this.remeasureItem}/>\r\n                    <br/>\r\n                </Collapse>       \r\n            </ListGroupItem>\r\n        )\r\n    }\r\n\r\n    \r\n    async gatherPokeData(id) {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        \r\n        let [pokemon, pokemonSpecies] = \r\n            await Promise.all([\r\n                p.getPokemonByName(id),\r\n                p.getPokemonSpeciesByName(id)]);\r\n\r\n        let movesetPromise = processMoves(pokemon.moves);\r\n        let evolutionPromise = p.resource(pokemonSpecies.evolution_chain.url)\r\n\r\n        let data = Object.assign( \r\n            {types: processTypes(pokemon.types)},\r\n            {stats: pokemon.stats}, \r\n            {entryText: getEntryText(pokemonSpecies.flavor_text_entries)},\r\n            {evolutions: processEvolutions((await Promise.resolve(evolutionPromise)).chain)},\r\n            {moveset: await Promise.resolve(movesetPromise)})\r\n            \r\n        return data;\r\n    }\r\n\r\n    remeasureItem = () => {\r\n        let intervalID = setInterval(this.props.onLoad, 30);\r\n        setTimeout(() => clearInterval(intervalID), 500);\r\n    }\r\n\r\n}\r\n\r\nexport default Item","import React, { Component } from 'react';\r\nimport Item from './Item';\r\nimport { getID } from '../../library/utilities';\r\nimport { Fade } from 'reactstrap';\r\nimport { List, AutoSizer, CellMeasurer,CellMeasurerCache } from 'react-virtualized';\r\n\r\n\r\n\r\nclass ItemList extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: 120\r\n        });\r\n        this.state = {\r\n            focusIndex: undefined\r\n        }\r\n    }\r\n\r\n\r\n    renderRow = ({index, key, parent, style}) => (\r\n        <CellMeasurer \r\n            key = {key}\r\n            cache = {this.cache}\r\n            parent = {parent}\r\n            columnIndex = {0}\r\n            rowIndex={index}\r\n        >\r\n        {({ measure }) => (\r\n            <div style={style} key={key}>         \r\n                <Item \r\n                    entry  = {this.props.pokemons[index].entry_number}\r\n                    name   = {this.props.pokemons[index].pokemon_species.name}\r\n                    id     = {getID(this.props.pokemons[index].pokemon_species.url)}\r\n                    onLoad = {measure}\r\n                />\r\n            </div>       \r\n        )}\r\n        </CellMeasurer>\r\n    );\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fade>\r\n                <div style={{height: 'calc(100vh - 63px)'}}>\r\n                    <AutoSizer>\r\n                        {({ height, width }) => (\r\n                            <List \r\n                                width = {width}\r\n                                height = {height}\r\n                                rowHeight = {this.cache.rowHeight}\r\n                                rowRenderer = {this.renderRow}\r\n                                rowCount = {this.props.pokemons.length} \r\n                                overscanRowCount = {20}\r\n                                deferredMeasurementCache = {this.cache}\r\n                                scrollToIndex = {this.state.focusIndex}\r\n                            />\r\n                        )}\r\n                    </AutoSizer>\r\n                </div>\r\n            </Fade>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ItemList","import React, { Component, Fragment } from 'react';\r\nimport ItemSettings from './ItemSettings';\r\nimport ItemList from './ItemList';\r\nimport Pokedex from 'pokedex-promise-v2';\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokemons: [],\r\n            filtered: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.applyPokedex(\"national\");\r\n    }\r\n\r\n    async gatherPokesByPokedex(pokedex) {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        let data = await p.getPokedexByName(pokedex)\r\n        return data.pokemon_entries;\r\n    }\r\n\r\n    applyPokedex = async (pokedex) => {\r\n        let pokes = await this.gatherPokesByPokedex(pokedex);\r\n        this.setState({pokemons: pokes, filtered: pokes});\r\n    }\r\n\r\n    applyFilter = async (filterValue) => {\r\n        const filter = filterValue.toLowerCase();\r\n        const pokemons = this.state.pokemons;\r\n        const filterFunction = (p) => {\r\n            for (let i=0; i < filter.length; i++) {\r\n                if (filter.charAt(i) !== p.pokemon_species.name.charAt(i)) \r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        const output = filter ? pokemons.filter(filterFunction) : pokemons;  \r\n        this.setState({filtered: output});\r\n    }\r\n\r\n\r\n    render() {\r\n        const filtered = this.state.filtered;\r\n        const applyFilter = this.applyFilter;\r\n        const applyPokedex = this.applyPokedex;\r\n\r\n        return (\r\n            <Fragment>\r\n                <ItemSettings \r\n                    applyPokedex={applyPokedex}\r\n                    applyFilter={applyFilter}\r\n                />\r\n                <ItemList \r\n                    pokemons={filtered}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Component } from 'react';\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: '100vh', overflow: 'hidden'}}>\r\n                <Sidebar />\r\n            </div>       \r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage\r\n","import React, { Component, Fragment } from 'react';\nimport MainPage from './pages/MainPage';\n// import NavBar from './components/NavBar';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Fragment>\n        {/* <NavBar /> */}\n        <MainPage />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}