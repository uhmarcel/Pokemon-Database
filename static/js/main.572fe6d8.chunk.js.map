{"version":3,"sources":["components/NavBar.js","library/utilities.js","components/Sidebar/ItemSettings.js","components/Sidebar/PokeData/PokeEntry.js","components/Sidebar/PokeData/PokeStats.js","components/Sidebar/PokeData/PokeEvolutions.js","components/Utilities/Type.js","components/Sidebar/PokeData/PokeReview.js","components/Sidebar/PokeData/PokeMoves.js","components/Sidebar/Item.js","components/Sidebar/ItemList.js","components/Sidebar/Sidebar.js","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Component","getID","url","urlTokens","split","length","getImageByID","id","capitalize","str","charAt","toUpperCase","substring","getEntryText","flavor","i","language","name","flavor_text","processEvolutions","evolutionAPI","base","species","imgurl","evolutions","currentNode","evolves_to","push","atLvl","evolution_details","min_level","getTypeColor","type","filterNonLvlup","moves","filtered","lvl","j","version_group_details","move_learn_method","level_learned_at","move","processMoves","_x","_processMoves","apply","this","arguments","_callee","p","promises","response","processed","regenerator_default","a","wrap","_context","prev","next","Pokedex","protocol","map","m","resource","Promise","all","sent","accuracy","class","damage_class","power","sort","b","abrupt","stop","formatName","out","ItemSettings","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","setState","prevState","dropdown","state","pokedexs","input","gatherAllPokedexs","dexs","getPokedexsList","data","results","e","applyFilter","applyPokedex","react_default","createElement","ListGroupItem","className","style","borderRadius","InputGroup","Input","autoComplete","placeholder","onChange","target","value","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","color","caret","DropdownMenu","dex","DropdownItem","onClick","key","PokeEntry","entryText","Card","CardBody","PokeStats","stats","display","s","base_stat","Array","react","Progress","max","arrowStyles","borderLeft","borderTop","borderBottom","PokeEvolutions","Row","Col","src","alt","evol","evoMsg","getEvolutionMsg","evolution","message","Type","background","PokeReview","types","t","currentDisplay","xs","Fade","Utilities_Type","PokeMoves","moveset","Table","hover","size","itemStyle","borderRight","paddingTop","paddingBottom","imgStyle","height","Item","remeasureItem","intervalID","setInterval","onLoad","setTimeout","clearInterval","bind","assertThisInitialized","collapse","textEntry","_this2","gatherPokeData","then","_this$state$data","img","entryNumber","entry","pokeData","PokeData_PokeReview","PokeData_PokeStats","PokeData_PokeEntry","PokeData_PokeEvolutions","PokeData_PokeMoves","action","Collapse","onEntered","onExited","onExiting","getPokemonByName","getPokemonSpeciesByName","pokemon","pokemonSpecies","movesetPromise","evolutionPromise","evolution_chain","slot","flavor_text_entries","resolve","chain","assign","ItemList","renderRow","_ref","index","parent","es","cache","columnIndex","rowIndex","_ref2","measure","Sidebar_Item","pokemons","entry_number","pokemon_species","CellMeasurerCache","fixedWidth","defaultHeight","focusIndex","undefined","_ref3","width","rowHeight","rowRenderer","rowCount","overscanRowCount","deferredMeasurementCache","scrollToIndex","Sidebar","asyncToGenerator","mark","pokedex","pokes","console","log","gatherPokesByPokedex","_callee2","filterValue","filter","filterFunction","output","_context2","toLowerCase","_x2","getPokedexByName","pokemon_entries","Sidebar_ItemSettings","Sidebar_ItemList","MainPage","overflow","components_Sidebar_Sidebar","App","pages_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.572fe6d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import { NavLink as Nlink, withRouter } from 'react-router-dom';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\n\r\n\r\n\r\nclass NavBar extends Component {\r\n\r\n    constructor(props) {\r\n            super(props);\r\n        \r\n            this.toggle = this.toggle.bind(this);\r\n            this.state = {\r\n            isOpen: false\r\n            };\r\n        }\r\n        toggle() {\r\n            this.setState({\r\n            isOpen: !this.state.isOpen\r\n            });\r\n        }\r\n        render() {\r\n            return (\r\n            <div className='sticky-top'>\r\n                <Navbar color='dark' dark expand=\"md\">\r\n                <NavbarBrand href=\"/\">Pokedex</NavbarBrand>\r\n                <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"/components/\">Components</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NavBar","import Pokedex from 'pokedex-promise-v2';\r\n\r\nexport function getID(url) {    \r\n    const urlTokens = url.split(\"/\");\r\n    const id = urlTokens[urlTokens.length - 2];\r\n    return id;\r\n}\r\n\r\nexport function getImageByID(id) {\r\n    const rawUrl = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\r\n    return rawUrl + id + '.png';\r\n}\r\n\r\nexport function capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1)\r\n}\r\n\r\nexport function getEntryText(flavor) {\r\n    for (let i=0; i<flavor.length; i++) {\r\n        if (flavor[i].language.name === \"en\")\r\n            return flavor[i].flavor_text\r\n    }\r\n}\r\n\r\nexport function processEvolutions(evolutionAPI) {\r\n    let base = {\r\n        name: evolutionAPI.species.name,\r\n        imgurl: getImageByID(getID(evolutionAPI.species.url))\r\n    }\r\n    let evolutions = [];\r\n    let currentNode = evolutionAPI.evolves_to;\r\n    while (currentNode[0]) {\r\n        evolutions.push({\r\n            name: currentNode[0].species.name,\r\n            imgurl: getImageByID(getID(currentNode[0].species.url)),\r\n            atLvl: currentNode[0].evolution_details[0].min_level\r\n        });\r\n        currentNode = currentNode[0].evolves_to;\r\n    }\r\n    return { base, evolutions };\r\n}\r\n\r\nexport function getTypeColor(type) {\r\n    switch (type) {\r\n        case 'normal':   return '#BDBDAE';\r\n        case 'poison':   return '#AC5DA3';\r\n        case 'psychic':  return '#FA65B5';\r\n        case 'grass':    return '#8DD850';\r\n        case 'ground':   return '#EDCB56';\r\n        case 'ice':      return '#97F1FF';\r\n        case 'fire':     return '#FA5441';\r\n        case 'rock':     return '#CEBD73';\r\n        case 'dragon':   return '#8474FE';\r\n        case 'water':    return '#55AFFF';\r\n        case 'bug':      return '#C2D21A';\r\n        case 'dark':     return '#8F6955';\r\n        case 'fighting': return '#7F4440';\r\n        case 'ghost':    return '#7B76D8';\r\n        case 'steel':    return '#C4C2DB';\r\n        case 'flying':   return '#7AA5FF';\r\n        case 'electric': return '#FDE63C';\r\n        case 'fairy':    return '#F9AEFF';\r\n        default:         return '#E9ECEF';\r\n    }\r\n}\r\n\r\nexport function filterNonLvlup(moves) {\r\n    let filtered = [];\r\n    \r\n    for (let i=0; i<moves.length; i++) {\r\n        let lvl = -1;\r\n        for (let j=0; j<moves[i].version_group_details.length; j++) {\r\n            if (moves[i].version_group_details[j].move_learn_method.name === 'level-up') {\r\n                lvl = moves[i].version_group_details[j].level_learned_at;\r\n                break;\r\n            }\r\n        }\r\n        if (lvl === -1)\r\n            continue;\r\n        const name = moves[i].move.name;\r\n        const url = moves[i].move.url;\r\n        filtered.push({name, lvl, url});\r\n    }\r\n    return filtered;\r\n}\r\n\r\n\r\nexport async function processMoves(moves) {\r\n    let p = new Pokedex({protocol: 'https'});\r\n    \r\n    let filtered = filterNonLvlup(moves);\r\n    let promises = filtered.map( m => p.resource(m.url) );\r\n    let response = await Promise.all(promises);\r\n    let processed = [];\r\n\r\n    for (let i=0; i<filtered.length; i++) {\r\n        processed.push({\r\n            name: filtered[i].name,\r\n            lvl: filtered[i].lvl,\r\n            accuracy: response[i].accuracy,\r\n            class: response[i].damage_class.name,\r\n            power: response[i].power,\r\n            type: response[i].type.name\r\n        })\r\n    }    \r\n    processed.sort((a,b) => (a.lvl > b.lvl) ? 1 : -1);\r\n    return processed;\r\n}\r\n\r\n\r\nexport function processTypes(types) {\r\n    let processed = types.sort( (a,b) =>\r\n        a.slot > b.slot ? 1 : -1\r\n    )\r\n    return processed\r\n}\r\nexport function formatName(name) {\r\n    let out = name.charAt(0).toUpperCase();\r\n    for (let i=1; i<name.length; i++) {\r\n        if (name.charAt(i) === '-') {\r\n            out += \" \" + name.charAt(i+1).toUpperCase();\r\n            i++; \r\n        }\r\n        else {\r\n            out += name.charAt(i);\r\n        }\r\n    }\r\n    return out;\r\n}","import React, { Component } from 'react';\r\nimport { ListGroupItem, Input, InputGroup, InputGroupButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport Pokedex from 'pokedex-promise-v2';\r\nimport { formatName } from '../../library/utilities';\r\n\r\nclass ItemSettings extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokedexs: [],\r\n            input: '',\r\n            dropdown: false\r\n        }\r\n    }    \r\n\r\n    async componentDidMount() {\r\n        let dexs = await this.gatherAllPokedexs();\r\n        this.setState({pokedexs: dexs});\r\n    }\r\n\r\n    async gatherAllPokedexs() {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        let data = await p.getPokedexsList();\r\n        return data.results.map(e => e.name);\r\n    }\r\n\r\n    toggleDropdown = () => {\r\n        this.setState(prevState => ({dropdown: !prevState.dropdown}));\r\n    }\r\n\r\n\r\n    render() {\r\n        const pokedexs = this.state.pokedexs;\r\n        const dropdown = this.state.dropdown;\r\n        const applyFilter = this.props.applyFilter;\r\n        const applyPokedex = this.props.applyPokedex;\r\n\r\n        return (\r\n            <ListGroupItem className='sticky-top bg-dark' style={{borderRadius: '0'}}>\r\n                <InputGroup>\r\n                    <Input \r\n                        type = \"text\" \r\n                        autoComplete = \"off\" \r\n                        placeholder = \"Search\" \r\n                        onChange = {e => applyFilter(e.target.value)} \r\n                    />\r\n                    <InputGroupButtonDropdown addonType=\"append\" isOpen={dropdown} toggle={this.toggleDropdown}>\r\n                        <DropdownToggle color='info' caret> Dex </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            {pokedexs.map( dex => (\r\n                                <DropdownItem \r\n                                    onClick={e => applyPokedex(e.target.name)}\r\n                                    key={dex}\r\n                                    name={dex}\r\n                                >\r\n                                    {formatName(dex)}\r\n                                </DropdownItem>\r\n                            ))}\r\n                        </DropdownMenu>\r\n                    </InputGroupButtonDropdown>\r\n                </InputGroup>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ItemSettings\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\n\r\nclass PokeEntry extends Component {\r\n\r\n    render() {\r\n        const entryText = this.props.entryText ? this.props.entryText : \"Loading entry...\";\r\n\r\n        return (   \r\n            <Card>\r\n                <CardBody>\r\n                    {entryText}\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokeEntry\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Progress } from 'reactstrap';\r\n\r\nclass PokeStats extends Component {\r\n\r\n    render() {\r\n        const stats = this.props.stats;\r\n        \r\n        const display = stats[0] ? stats.map(s => s.base_stat) : Array(6);\r\n        const maxStat = 150;\r\n\r\n        return (   \r\n            <Fragment>\r\n                <div className=\"text-center\">HP</div>\r\n                <Progress color=\"danger\" value={display[5]} max={maxStat}> <span className='text-right pr-2'>{display[5]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Attack</div>\r\n                <Progress color=\"warning\"value={display[4]} max={maxStat}> <span className='text-right pr-2'>{display[4]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Defense</div>\r\n                <Progress color=\"warning\" value={display[3]} max={maxStat}> <span className='text-right pr-2'>{display[3]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Sp. Atk</div>\r\n                <Progress color=\"info\" value={display[2]} max={maxStat}> <span className='text-right pr-2'>{display[2]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Sp. Def</div>\r\n                <Progress color=\"success\" value={display[1]} max={maxStat}> <span className='text-right pr-2'>{display[1]}</span> </Progress>\r\n                \r\n                <div className=\"text-center\">Speed</div>\r\n                <Progress color=\"primary\"value={display[0]} max={maxStat}> <span className='text-right pr-2'>{display[0]}</span> </Progress>           \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokeStats\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst arrowStyles = {\r\n    display: 'inline-block',\r\n    borderLeft: '14px solid #aaa',\r\n    borderTop: '9px solid transparent',\r\n    borderBottom: '9px solid transparent'\r\n    \r\n}\r\n\r\nclass PokeEvolutions extends Component {\r\n\r\n    render() {\r\n        const base = this.props.evolutions.base;\r\n        const evolutions = this.props.evolutions.evolutions;\r\n        \r\n        if (evolutions) {\r\n            return (   \r\n                <Row>\r\n                    <Col className='p-0 text-center'>\r\n                        <img src={base.imgurl} alt='item' className='img-fluid'/>\r\n                    </Col>\r\n                    \r\n                    {evolutions.map( (evol, i) => {\r\n                        const evoMsg = this.getEvolutionMsg(evol);\r\n\r\n                        return (\r\n                        <Fragment key={i}>\r\n                            <div className='d-flex align-items-center'>\r\n                                <div>\r\n                                    <div className='text-center'>\r\n                                        <div style={arrowStyles}></div>\r\n                                    </div>\r\n                                    <small>{evoMsg}</small>\r\n                                </div>\r\n                            </div>\r\n                            <Col className='p-0 text-center'>\r\n                                <img src={evol.imgurl} alt='item' className='img-fluid'/>\r\n                            </Col>\r\n                        </Fragment>\r\n                        )}\r\n                    )}\r\n                </Row>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    getEvolutionMsg(evolution) {\r\n        let message = '';\r\n        if (evolution.atLvl) {\r\n            message = 'lvl ' + evolution.atLvl;\r\n        }\r\n        return message;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PokeEvolutions\r\n","import React, { Component } from 'react';\r\nimport { capitalize, getTypeColor } from '../../library/utilities';\r\n\r\n\r\nclass Type extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.style = {\r\n            background: getTypeColor(this.props.type),\r\n            borderRadius: '8px'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const type = this.props.type;\r\n        const display = type ? capitalize(type) : '';\r\n\r\n        return (  \r\n            <div className='text-light text-center' style={this.style}> \r\n                {display}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Type","import React, { Component } from 'react';\r\nimport { Fade, Row, Col } from 'reactstrap';\r\nimport Type from '../../Utilities/Type';\r\n\r\n\r\nclass PokeReview extends Component {\r\n\r\n    render() {\r\n        const types = this.props.types;\r\n\r\n        const display = types ? types.map(t => t.type.name) : [];\r\n        const show = types ? true : false;\r\n\r\n        return (  \r\n            <Row>\r\n                {display.map( currentDisplay =>\r\n                    <Col xs='4' key={currentDisplay}>\r\n                        <Fade>\r\n                            <Type type={currentDisplay} />\r\n                        </Fade>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PokeReview\r\n","import React, { Component } from 'react';\r\nimport { Table, Card } from 'reactstrap';\r\nimport { formatName } from '../../../library/utilities';\r\nimport Type from '../../Utilities/Type';\r\n\r\nclass PokeMoves extends Component {\r\n    \r\n    render() {\r\n        const moveset = this.props.moveset; // {name, lvl, url}\r\n        \r\n        if (moveset) {\r\n            return ( \r\n                <Card>\r\n                    <Table hover size='sm' className='mb-1'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th className='text-center'>Lv.</th>\r\n                                <th>Move</th>\r\n                                <th>Type</th>\r\n                                <th className='text-right'>Pow.</th>\r\n                                <th className='text-right'>Acc.</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {moveset.map(m => \r\n                            <tr key={m.name} className=\"small\">\r\n                                <td className='text-right'> {m.lvl} </td>\r\n                                <td> {formatName(m.name)} </td>\r\n                                <td> {m.class !== 'status'? <Type type={m.type}/> : ''} </td>\r\n                                <td className='text-right'> {m.power ? m.power : '-'} </td>\r\n                                <td className='text-right'> {m.accuracy ? m.accuracy : '-'} </td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default PokeMoves\r\n","import React, { Component, Fragment } from 'react';\r\nimport { ListGroupItem, Row, Col, Collapse } from 'reactstrap';\r\nimport Pokedex from 'pokedex-promise-v2';\r\n\r\nimport { getImageByID, capitalize, getEntryText, processEvolutions, processMoves, processTypes } from '../../library/utilities'\r\nimport PokeEntry from './PokeData/PokeEntry';\r\nimport PokeStats from './PokeData/PokeStats';\r\nimport PokeEvolutions from './PokeData/PokeEvolutions';\r\nimport PokeReview from './PokeData/PokeReview';\r\nimport PokeMoves from './PokeData/PokeMoves';\r\n\r\n\r\nconst itemStyle = {\r\n    borderTop: 'none',\r\n    borderLeft: 'none',\r\n    borderRight: 'none',\r\n    borderRadius: '0',\r\n    paddingTop: '10px',\r\n    paddingBottom: '10px'\r\n}\r\n\r\nconst imgStyle = {\r\n    height: '96px'\r\n}\r\n\r\n\r\nclass Item extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = { \r\n            collapse: false,\r\n            data: {\r\n                stats: [],\r\n                textEntry: '',\r\n                evolutions: []\r\n            }\r\n        };\r\n    }  \r\n\r\n    componentDidMount() {\r\n        this.props.onLoad();\r\n    }\r\n\r\n    toggle() {\r\n        if (!this.state.data.entryText) {\r\n            this.gatherPokeData(this.props.id)\r\n            .then(data => this.setState({data}));\r\n        }\r\n        this.setState( prevState => ({ collapse: !prevState.collapse })); \r\n    }\r\n\r\n\r\n    render() {\r\n        const { types, entryText, stats, evolutions, moveset } = this.state.data;\r\n        const img = getImageByID(this.props.id);\r\n        const name = capitalize(this.props.name);\r\n        const entryNumber = this.props.entry;\r\n\r\n        let pokeData = '';\r\n        if (this.state.collapse || 1===1) {\r\n            pokeData = \r\n                <Fragment>\r\n                    <PokeReview types={types}/>\r\n                    <br/>\r\n                    <PokeStats stats={stats} />\r\n                    <br/>\r\n                    <PokeEntry entryText={entryText} />\r\n                    <br/>\r\n                    <PokeEvolutions evolutions={evolutions} />\r\n                    <br/>\r\n                    <PokeMoves moveset={moveset}/>\r\n                </Fragment>\r\n        }\r\n\r\n        return (\r\n            <ListGroupItem action style={itemStyle} onClick={this.toggle}>\r\n                <Row>\r\n                    <Col xs='3' className='text-center'>\r\n                        <div style={imgStyle}>\r\n                            <img src={img} alt='item' style={imgStyle}/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs='6' className='align-self-center text-center'>\r\n                        <p>{name}</p>\r\n                    </Col>\r\n                    <Col xs='3' className='align-self-center text-center'>\r\n                        <p>{entryNumber}</p>\r\n                    </Col>\r\n                </Row>  \r\n\r\n                <Collapse \r\n                    isOpen={this.state.collapse} \r\n                    onEntered={this.props.onLoad}\r\n                    onExited={this.props.onLoad}\r\n                    onExiting={this.remeasureItem}\r\n                >\r\n                    {pokeData}\r\n                    <br/>\r\n                </Collapse>       \r\n            </ListGroupItem>\r\n        )\r\n    }\r\n\r\n    \r\n    async gatherPokeData(id) {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        \r\n        let [pokemon, pokemonSpecies] = \r\n            await Promise.all([\r\n                p.getPokemonByName(id),\r\n                p.getPokemonSpeciesByName(id)]);\r\n\r\n        let movesetPromise = processMoves(pokemon.moves);\r\n        let evolutionPromise = p.resource(pokemonSpecies.evolution_chain.url)\r\n\r\n        let data = Object.assign( \r\n            {types: processTypes(pokemon.types)},\r\n            {stats: pokemon.stats}, \r\n            {entryText: getEntryText(pokemonSpecies.flavor_text_entries)},\r\n            {evolutions: processEvolutions((await Promise.resolve(evolutionPromise)).chain)},\r\n            {moveset: await Promise.resolve(movesetPromise)})\r\n            \r\n        return data;\r\n    }\r\n\r\n    remeasureItem = () => {\r\n        let intervalID = setInterval(this.props.onLoad, 30);\r\n        setTimeout(() => clearInterval(intervalID), 500);\r\n    }\r\n\r\n}\r\n\r\nexport default Item","import React, { Component } from 'react';\r\nimport Pokedex from 'pokedex-promise-v2';\r\nimport Item from './Item';\r\nimport { getID } from '../../library/utilities';\r\nimport { Fade } from 'reactstrap';\r\nimport { List, AutoSizer, CellMeasurer,CellMeasurerCache } from 'react-virtualized';\r\n\r\n\r\n\r\nclass ItemList extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: 120\r\n        });\r\n        this.state = {\r\n            focusIndex: undefined\r\n        }\r\n    }\r\n\r\n\r\n    renderRow = ({index, key, parent, style}) => (\r\n        <CellMeasurer \r\n            key = {key}\r\n            cache = {this.cache}\r\n            parent = {parent}\r\n            columnIndex = {0}\r\n            rowIndex={index}\r\n        >\r\n        {({ measure }) => (\r\n            <div style={style} key={key}>         \r\n                <Item \r\n                    entry  = {this.props.pokemons[index].entry_number}\r\n                    name   = {this.props.pokemons[index].pokemon_species.name}\r\n                    id     = {getID(this.props.pokemons[index].pokemon_species.url)}\r\n                    onLoad = {measure}\r\n                />\r\n            </div>       \r\n        )}\r\n        </CellMeasurer>\r\n    );\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fade>\r\n                <div style={{height: 'calc(100vh - 63px)'}}>\r\n                    <AutoSizer>\r\n                        {({ height, width }) => (\r\n                            <List \r\n                                width = {width}\r\n                                height = {height}\r\n                                rowHeight = {this.cache.rowHeight}\r\n                                rowRenderer = {this.renderRow}\r\n                                rowCount = {this.props.pokemons.length} \r\n                                overscanRowCount = {20}\r\n                                deferredMeasurementCache = {this.cache}\r\n                                scrollToIndex = {this.state.focusIndex}\r\n                            />\r\n                        )}\r\n                    </AutoSizer>>\r\n                </div>\r\n            </Fade>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ItemList","import React, { Component, Fragment } from 'react';\r\nimport ItemSettings from './ItemSettings';\r\nimport ItemList from './ItemList';\r\nimport Pokedex from 'pokedex-promise-v2';\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokemons: [],\r\n            filtered: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.applyPokedex(\"national\");\r\n    }\r\n\r\n    async gatherPokesByPokedex(pokedex) {\r\n        let p = new Pokedex({protocol: 'https'});\r\n        let data = await p.getPokedexByName(pokedex)\r\n        return data.pokemon_entries;\r\n    }\r\n\r\n    applyPokedex = async (pokedex) => {\r\n        console.log(pokedex);\r\n        let pokes = await this.gatherPokesByPokedex(pokedex);\r\n        this.setState({pokemons: pokes, filtered: pokes});\r\n    }\r\n\r\n    applyFilter = async (filterValue) => {\r\n        const filter = filterValue.toLowerCase();\r\n        const pokemons = this.state.pokemons;\r\n        const filterFunction = (p) => {\r\n            for (let i=0; i < filter.length; i++) {\r\n                if (filter.charAt(i) !== p.pokemon_species.name.charAt(i)) \r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        const output = filter ? pokemons.filter(filterFunction) : pokemons;  \r\n        this.setState({filtered: output});\r\n    }\r\n\r\n\r\n    render() {\r\n        const filtered = this.state.filtered;\r\n        const applyFilter = this.applyFilter;\r\n        const applyPokedex = this.applyPokedex;\r\n\r\n        return (\r\n            <Fragment>\r\n                <ItemSettings \r\n                    applyPokedex={applyPokedex}\r\n                    applyFilter={applyFilter}/>\r\n                <ItemList \r\n                    pokemons={filtered}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Component } from 'react';\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: '100vh', overflow: 'hidden'}}>\r\n                <Sidebar />\r\n            </div>       \r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage\r\n","import React, { Component, Fragment } from 'react';\nimport NavBar from './components/NavBar';\nimport MainPage from './pages/MainPage';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Fragment>\n        {/* <NavBar /> */}\n        <MainPage />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}